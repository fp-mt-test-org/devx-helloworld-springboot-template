apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: devx-helloworld-springboot-template
  title: DevX Spring Boot gRPC HelloWorld Service Template
  description: Create a simple microservice using gRPC and Spring Boot Java
  tags:
    - recommended
    - java
    - grpc
spec:
  owner: devx@example.com
  type: service
  parameters:
    - title: Fill in template parameters
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique service name
          ui:autofocus: true
          ui:options:
            rows: 5
        http_port:
          title: Port
          type: integer
          default: 8080
          description: The port to run the gRPC service on
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:cookiecutter
      input:
        url: ./template
        values:
          component_id: '{{ parameters.name }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'
          java_package_name: '{{ parameters.name }}'
          # owner: '{{ parameters.owner }}'
          http_port: '{{ parameters.http_port }}'
          
    - id: provision
      name: Provisioning
      action: github:repository_dispach
      input:
        event_type: provision-project
        owner: fp-mt-test-org
        repo: development-infrastructure
        client_payload: '{"project_name":"{{ parameters.name }}"}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'This is {{ parameters.name }}'
        repoUrl: 'github.com?owner=fp-mt-test-org&repo={{ parameters.name }}'
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  # some outputs which are saved along with the job for use in the frontend
  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'
